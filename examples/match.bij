dec putIntLn :: Int -> Int
def putIntLn i = ccall<printf "%i\n" i>

dec putStrLn :: Str -> Int
def putStrLn s = ccall<printf "%s\n" s>

dec add :: Int -> Int -> Int
def add x y = prim<add x y>

dec sub :: Int -> Int -> Int
def sub x y = prim<sub x y>

dec mul :: Int -> Int -> Int
def mul x y = prim<mul x y>

dec div :: Int -> Int -> Int
def div x y = prim<div x y>

dec fac :: Int -> Int
def fac x = case x of
    | 0 -> 1
    | y -> mul x (fac (sub x 1))

data List a =
    | Cons a (List a)
    | Nil

dec id :: a -> a
def id x = x

dec map :: (a -> b) -> List a -> List b
def map f ls = case ls of
    | Cons a as -> Cons (f a) (map f as)
    | Nil -> Nil

dec showList :: (a -> Int) -> List a -> Int
def showList showElem ls = let val x = map showElem ls in 0

extern 2 printf
dec printf :: Str -> Str -> Int

entry start
dec start :: Int -> Int
def start x = do
    map (printf "%s ") (Cons "world!" (Cons "hello," Nil))
    in 0